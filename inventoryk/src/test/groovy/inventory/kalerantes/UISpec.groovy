/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package inventory.kalerantes

import inventory.menu.Menu
import inventory.menu.MenuItem
import spock.lang.Specification

class UISpec extends Specification {

	UI ui

	def setup() {
		ui = new UI()
	}

	def prompt() {
		given:
		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		ui.prompt(out)

		then:
		captureOutput.toString() == "Enter choice: ${System.lineSeparator()}"
	}

	def printMenuOptions() {
		given:
		Menu menu = Stub()
		String options = "option1${System.lineSeparator()}option2"
		menu.options() >> options
		ui = new UI(menu)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		ui.printMenuOptions(out)

		then:
		captureOutput.toString() == options + System.lineSeparator()

	}

	def "parse input with valid choice"() {
		given:
		def userKeys = "1" + System.lineSeparator()
		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		CLIMenuChoiceValidator stub = Stub()
		ui.cliMenuChoiceValidator = stub

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		String choice = ui.parseInputFromCommandLine(scanner, out, err)

		then:
		choice == "1"
		captureOutput.toString() == ""
		captureOutputError.toString() == ""
	}


	def "parse invalid input"() {
		given:
		String invalidChoice = "a" + System.lineSeparator()
		String validChoice = "1" + System.lineSeparator()
		def userKeys =  invalidChoice + validChoice

		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		String choice = ui.parseInputFromCommandLine(scanner, out, err)

		then: "the final choice is 1"
		choice == "1"

		and: "no exception is thrown"
		notThrown(Exception)

		and: "the error message of the invalid choice is captured"
		captureOutputError.toString() == "Expected value between 1 and 6 but got a instead.${System.lineSeparator()}"

		and: "the user was asked to re-enter a valid choice"
		captureOutput.toString() == "Enter choice: ${System.lineSeparator()}"
	}

	def doIt() {
		given:
		def userKeys = "1" + System.lineSeparator()
		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		Menu menuStub = Mock()
		ui.menu = menuStub

		MenuItem menuItemMock = Mock()

		when:
		ui.dotIt(scanner, out, err)

		then:
		1 * menuStub.options() >> { "options" }
		1 * menuStub.findByCode("1") >>  menuItemMock
		1 * menuItemMock.execute(ui.list, scanner, out)
		captureOutput.toString() == "options${System.lineSeparator()}Enter choice: ${System.lineSeparator()}"
	}

}
