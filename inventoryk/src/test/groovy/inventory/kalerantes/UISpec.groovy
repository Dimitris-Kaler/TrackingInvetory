/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package inventory.kalerantes

import exceptions.InvalidMenuChoice
import inventory.menu.Menu
import inventory.menu.MenuItem
import spock.lang.Specification
import spock.lang.Unroll

class UISpec extends Specification {

	UI ui

	def setup() {
		ui = new UI()
	}

	//TODO the following two test are Integration tests. They can be simplified when app class is simplified
	@Unroll
	def "accept input throws exception if not between 1 and 6"() {
		given:
		def input = new ByteArrayInputStream((choice + System.lineSeparator() ).getBytes());
		Scanner scanner = new Scanner(input)

		OutputStream captureOutput = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)

		when:
		ui.validateChoice(scanner, out)

		then:
		def e = thrown(InvalidMenuChoice)
		e.message == "Expected value between 1 and 6 but got ${choice} instead."

		where:
		choice << ["a", "asdfasdgfasdg", "112", "0", null]
	}

	@Unroll
	def "accept input only between 1 and 6" () {
		given:
		def input = new ByteArrayInputStream((choice + System.lineSeparator() ).getBytes());
		Scanner scanner = new Scanner(input)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		ui.validateChoice(scanner, out)

		then:
		notThrown(InvalidMenuChoice)

		where:
		choice << ("1".."6")
	}

	def prompt() {
		given:
		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		ui.prompt(out)

		then:
		captureOutput.toString() == "Enter choice: ${System.lineSeparator()}"
	}

	def printMenuOptions() {
		given:
		Menu menu = Stub()
		String options = "option1${System.lineSeparator()}option2"
		menu.options() >> options
		ui = new UI(menu)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		ui.printMenuOptions(out)

		then:
		captureOutput.toString() == options + System.lineSeparator()

	}

	def "parse input with valid choice"() {
		given:
		def userKeys = "1" + System.lineSeparator()
		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		CLIMenuChoiceValidator stub = Stub()
		ui.cliMenuChoiceValidator = stub

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		String choice = ui.parseInputFromCommandLine(scanner, out, err)

		then:
		choice == "1"
		captureOutput.toString() == ""
		captureOutputError.toString() == ""
	}


	def "parse invalid input"() {
		given:
		def userKeys = "a" + System.lineSeparator()
		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		CLIMenuChoiceValidator stub = Stub()
		stub.validate(_) >> {throw new RuntimeException("fail")}
		ui.cliMenuChoiceValidator = stub

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		when:
		String choice = ui.parseInputFromCommandLine(scanner, out, err)

		then:
		choice == null
		notThrown(Exception)
		captureOutput.toString() == "Enter choice: ${System.lineSeparator()}"
		captureOutputError.toString() == "fail${System.lineSeparator()}"
	}

	def doIt() {
		given:
		def userKeys = "1" + System.lineSeparator()
		ByteArrayInputStream input = new ByteArrayInputStream(userKeys.getBytes())
		Scanner scanner = new Scanner(input)

		OutputStream captureOutput = new ByteArrayOutputStream()
		OutputStream captureOutputError = new ByteArrayOutputStream()
		PrintStream out = new PrintStream(captureOutput)
		PrintStream err = new PrintStream(captureOutputError)

		Menu menuStub = Mock()
		ui.menu = menuStub

		MenuItem menuItemMock = Mock()

		when:
		ui.dotIt(scanner, out, err)

		then:
		1 * menuStub.options() >> { "options" }
		1 * menuStub.findByCode("1") >>  menuItemMock
		1 * menuItemMock.execute(ui.list, scanner, out)
		captureOutput.toString() == "options${System.lineSeparator()}Enter choice: ${System.lineSeparator()}"
	}

}
